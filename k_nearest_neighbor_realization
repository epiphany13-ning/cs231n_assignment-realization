from builtins import range
from builtins import object
import numpy as np
from past.builtins import xrange

# 定义一个 K 最近邻分类器（KNearestNeighbor）
class KNearestNeighbor(object):
    """一个带有 L2 距离的 kNN 分类器"""

    # 初始化函数，没有具体操作
    def __init__(self):
        pass

    # 训练分类器的函数，这个函数主要是将训练数据存储起来，因为 kNN 只需要记住训练数据
    def train(self, X, y):
        """
        训练分类器。对于 k 最近邻算法，这只是记住训练数据，没有其他处理。

        输入：
        - X: 形状为 (num_train, D) 的 numpy 数组，包含训练数据，
          其中 num_train 是样本数量，D 是样本的维度。
        - y: 形状为 (N,) 的 numpy 数组，包含训练标签，y[i] 是 X[i] 的标签。
        """
        self.X_train = X  # 记录训练数据
        self.y_train = y  # 记录训练标签

    # 预测函数，根据距离来进行分类
    def predict(self, X, k=1, num_loops=0):
        """
        使用此分类器对测试数据进行预测。

        输入：
        - X: 形状为 (num_test, D) 的 numpy 数组，包含测试数据，
             其中 num_test 是测试样本的数量，D 是样本的维度。
        - k: k 最近邻的数量，用于投票决策。
        - num_loops: 决定使用哪种方式来计算训练点和测试点之间的距离。

        返回：
        - y: 形状为 (num_test,) 的 numpy 数组，包含测试数据的预测标签，
          y[i] 是测试点 X[i] 的预测标签。
        """
        # 根据 num_loops 选择不同的计算距离的方式
        if num_loops == 0:
            dists = self.compute_distances_no_loops(X)  # 无循环方式
        elif num_loops == 1:
            dists = self.compute_distances_one_loop(X)  # 单循环方式
        elif num_loops == 2:
            dists = self.compute_distances_two_loops(X)  # 双循环方式
        else:
            raise ValueError("无效的 num_loops 值 %d" % num_loops)

        return self.predict_labels(dists, k=k)  # 根据计算的距离预测标签

    # 使用双循环计算距离
    def compute_distances_two_loops(self, X):
        """
        使用嵌套循环计算测试点和训练点之间的欧氏距离。

        输入：
        - X: 形状为 (num_test, D) 的 numpy 数组，包含测试数据。

        返回：
        - dists: 形状为 (num_test, num_train) 的 numpy 数组，其中 dists[i, j]
          是第 i 个测试点和第 j 个训练点之间的欧氏距离。
        """
        num_test = X.shape[0]
        num_train = self.X_train.shape[0]
        dists = np.zeros((num_test, num_train))  # 初始化距离矩阵
        for i in range(num_test):
            for j in range(num_train):
                # 计算第 i 个测试点与第 j 个训练点的 L2 距离，并存储在 dists[i, j] 中
                # 注意：这里不允许使用 np.linalg.norm() 函数。
                pass  # 这里应该插入计算距离的代码

        return dists

    # 使用单循环计算距离
    def compute_distances_one_loop(self, X):
        """
        使用单循环计算测试点和训练点之间的欧氏距离。

        输入 / 输出：与 compute_distances_two_loops 相同
        """
        num_test = X.shape[0]
        num_train = self.X_train.shape[0]
        dists = np.zeros((num_test, num_train))  # 初始化距离矩阵
        for i in range(num_test):
            # 计算第 i 个测试点与所有训练点的距离，并存储在 dists[i, :] 中
            pass  # 这里插入距离计算的代码

        return dists

    # 使用无循环方式计算距离
    def compute_distances_no_loops(self, X):
        """
        使用无循环计算测试点和训练点之间的欧氏距离。

        输入 / 输出：与 compute_distances_two_loops 相同
        """
        num_test = X.shape[0]
        num_train = self.X_train.shape[0]
        dists = np.zeros((num_test, num_train))  # 初始化距离矩阵
        # 使用矩阵运算计算所有测试点和所有训练点的 L2 距离
        pass  # 这里插入使用矩阵运算计算距离的代码

        return dists

    # 根据距离矩阵预测测试样本的标签
    def predict_labels(self, dists, k=1):
        """
        给定测试点和训练点之间的距离矩阵，为每个测试点预测一个标签。

        输入：
        - dists: 形状为 (num_test, num_train) 的 numpy 数组，其中 dists[i, j]
          表示第 i 个测试点和第 j 个训练点之间的距离。

        返回：
        - y: 形状为 (num_test,) 的 numpy 数组，包含测试数据的预测标签，
          其中 y[i] 是第 i 个测试点的预测标签。
        """
        num_test = dists.shape[0]
        y_pred = np.zeros(num_test)  # 初始化预测标签
        for i in range(num_test):
            # 找到第 i 个测试点最近的 k 个训练点，并找出这些点的标签
            closest_y = []  # 存储最近邻的标签
            pass  # 这里实现寻找最近邻的代码

            # 找出最近邻标签中出现次数最多的标签并作为预测
            pass  # 这里插入确定最常见标签的代码

        return y_pred

